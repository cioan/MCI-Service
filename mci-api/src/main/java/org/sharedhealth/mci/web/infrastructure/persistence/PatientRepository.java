package org.sharedhealth.mci.web.infrastructure.persistence;import com.datastax.driver.core.querybuilder.Batch;import com.datastax.driver.core.querybuilder.QueryBuilder;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.sharedhealth.mci.utils.AppUtils;import org.sharedhealth.mci.web.handler.MCIResponse;import org.sharedhealth.mci.web.mapper.*;import org.sharedhealth.mci.web.model.*;import org.sharedhealth.mci.web.utils.UidGenerator;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.data.cassandra.convert.CassandraConverter;import org.springframework.data.cassandra.core.CassandraTemplate;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.List;import java.util.concurrent.ExecutionException;import static com.datastax.driver.core.querybuilder.QueryBuilder.in;import static com.datastax.driver.core.querybuilder.QueryBuilder.select;import static com.datastax.driver.core.querybuilder.Select.Where;import static org.apache.commons.collections4.CollectionUtils.intersection;import static org.apache.commons.lang3.StringUtils.isNotBlank;import static org.sharedhealth.mci.web.infrastructure.persistence.PatientQueryBuilder.*;import static org.springframework.data.cassandra.core.CassandraTemplate.createInsertQuery;@Componentpublic class PatientRepository extends BaseRepository {    protected static final Logger logger = LoggerFactory.getLogger(PatientRepository.class);    private final UidGenerator uid;    @Autowired    public PatientRepository(@Qualifier("MCICassandraTemplate") CassandraTemplate template, UidGenerator uid) {        super(template);        this.uid = uid;    }    public MCIResponse create(PatientDto patientDto) throws ExecutionException, InterruptedException {        String fullName = "";        if (patientDto.getGivenName() != null) {            fullName = patientDto.getGivenName();        }        if (patientDto.getSurName() != null) {            fullName = fullName + " " + patientDto.getSurName();        }        Patient p = getEntityFromPatientMapper(patientDto);        String healthId = uid.getId();        p.setHealthId(healthId);        p.setFullName(fullName);        p.setCreatedAt(new Date());        p.setUpdatedAt(new Date());        p.setSurName(patientDto.getSurName());        Batch batch = QueryBuilder.batch();        CassandraConverter converter = template.getConverter();        batch.add(createInsertQuery("patient", p, null, converter));        String nationalId = p.getNationalId();        if (isNotBlank(nationalId)) {            batch.add(createInsertQuery("nid_mapping", new NidMapping(nationalId, healthId), null, converter));        }        String brn = p.getBirthRegistrationNumber();        if (isNotBlank(brn)) {            batch.add(createInsertQuery("brn_mapping", new BrnMapping(brn, healthId), null, converter));        }        String uid = p.getUid();        if (isNotBlank(uid)) {            batch.add(createInsertQuery("uid_mapping", new UidMapping(uid, healthId), null, converter));        }        String phoneNumber = p.getCellNo();        if (isNotBlank(phoneNumber)) {            batch.add(createInsertQuery("phone_number_mapping", new PhoneNumberMapping(p.getPhoneNumberAreaCode(), phoneNumber, healthId), null, converter));        }        String divisionId = p.getDivisionId();        String districtId = p.getDistrictId();        String upazilaId = p.getUpazillaId();        String givenName = p.getGivenName();        String surname = p.getSurName();        if (AppUtils.isNotBlank(divisionId, districtId, upazilaId, givenName, surname)) {            batch.add(createInsertQuery("name_mapping", new NameMapping(divisionId, districtId, upazilaId, givenName, surname, healthId), null, converter));        }        template.execute(batch);        return new MCIResponse(p.getHealthId(), HttpStatus.CREATED);    }    public List<PatientDto> findAll(SearchCriteria criteria) {        List<String> healthIds = findHealthIds(criteria);        if (!CollectionUtils.isEmpty(healthIds)) {            Where where = select().from("patient").where(in(HEALTH_ID, healthIds.toArray(new String[]{})));            List<Patient> patients = template.select(where.toString(), Patient.class);            return filterPatients(patients, criteria);        }        return null;    }    List<PatientDto> filterPatients(List<Patient> patients, SearchCriteria criteria) {        List<PatientDto> result = new ArrayList<>(patients.size());        for (Patient p : patients) {            if (isMatchingPatient(p, criteria)) {                result.add(buildPatientDto(p));            }        }        return result;    }    private boolean isMatchingPatient(Patient p, SearchCriteria criteria) {        if (isNotBlank(criteria.getNid()) && !p.getNationalId().equals(criteria.getNid())) {            return false;        }        if (isNotBlank(criteria.getBrn()) && !criteria.getBrn().equals(p.getBirthRegistrationNumber())) {            return false;        }        if (isNotBlank(criteria.getUid()) && !criteria.getUid().equals(p.getUid())) {            return false;        }        if (isNotBlank(criteria.getAreaCode()) && !criteria.getAreaCode().equals(p.getPhoneNumberAreaCode())) {            return false;        }        if (isNotBlank(criteria.getPhoneNumber()) && !criteria.getPhoneNumber().equals(p.getCellNo())) {            return false;        }        if (isNotBlank(criteria.getDivisionId()) && !criteria.getDivisionId().equals(p.getDivisionId())) {            return false;        }        if (isNotBlank(criteria.getDistrictId()) && !criteria.getDistrictId().equals(p.getDistrictId())) {            return false;        }        if (isNotBlank(criteria.getUpazilaId()) && !criteria.getUpazilaId().equals(p.getUpazillaId())) {            return false;        }        if (isNotBlank(criteria.getCityCorpId()) && !criteria.getCityCorpId().equals(p.getCityCorporationId())) {            return false;        }        if (isNotBlank(criteria.getWardId()) && !criteria.getWardId().equals(p.getWardId())) {            return false;        }        if (isNotBlank(criteria.getGivenName()) && !criteria.getGivenName().equals(p.getGivenName())) {            return false;        }        if (isNotBlank(criteria.getSurname()) && !criteria.getSurname().equals(p.getSurName())) {            return false;        }        return true;    }    List<String> findHealthIds(SearchCriteria criteria) {        String query = null;        if (isNotBlank(criteria.getNid())) {            query = buildFindHidByNidQuery(criteria.getNid());        } else if (isNotBlank(criteria.getBrn())) {            query = buildFindHidByBrnQuery(criteria.getBrn());        } else if (isNotBlank(criteria.getUid())) {            query = buildFindHidByUidQuery(criteria.getUid());        } else if (isNotBlank(criteria.getPhoneNumber())) {            query = buildFindHidByPhoneNumberQuery(criteria.getPhoneNumber());        } else if (AppUtils.isNotBlank(criteria.getDivisionId(), criteria.getDistrictId(), criteria.getUpazilaId(),                criteria.getGivenName())) {            query = buildFindHidByAddressAndNameQuery(criteria.getDivisionId(), criteria.getDistrictId(),                    criteria.getUpazilaId(), criteria.getGivenName(), criteria.getSurname());        }        if (isNotBlank(query)) {            return template.queryForList(query, String.class);        }        return null;    }    public String findHealthId(String nid, String brn, String uid) {        Collection<String> hids = new ArrayList<>();        if (isNotBlank(nid)) {            hids = executeQuery(buildFindHidByNidQuery(nid));        }        if (isNotBlank(brn)) {            hids = intersection(hids, executeQuery(buildFindHidByBrnQuery(brn)));            if (CollectionUtils.isNotEmpty(hids)) {                return hids.iterator().next();            }        }        if (isNotBlank(uid)) {            hids = intersection(hids, executeQuery(buildFindHidByUidQuery(uid)));            if (CollectionUtils.isNotEmpty(hids)) {                return hids.iterator().next();            }        }        return null;    }    private List<String> executeQuery(String query) {        List<String> result = template.queryForList(query, String.class);        if (result == null) {            return new ArrayList<>();        }        return result;    }    public PatientDto findByHealthId(final String healthId) {        return buildPatientDto(template.selectOne(buildFindByHidQuery(healthId), Patient.class));    }    private PatientDto buildPatientDto(Patient patient) {        PatientDto patientDto = new PatientDto();        patientDto.setHealthId(patient.getHealthId());        patientDto.setNationalId(patient.getNationalId());        patientDto.setUid(patient.getNationalId());        patientDto.setPlaceOfBirth(patient.getPlaceOfBirth());        patientDto.setReligion(patient.getReligion());        patientDto.setBloodGroup(patient.getBloodGroup());        patientDto.setNameBangla(patient.getFullNameBangla());        patientDto.setBirthRegistrationNumber(patient.getBirthRegistrationNumber());        patientDto.setGivenName(patient.getGivenName());        patientDto.setSurName(patient.getSurName());        //  patientDto.setDateOfBirth(patient.getDateOfBirth().toString());        patientDto.setGender(patient.getGender());        patientDto.setOccupation(patient.getOccupation());        patientDto.setEducationLevel(patient.getEducationLevel());        patientDto.setNationality(patient.getNationality());        patientDto.setDisability(patient.getDisability());        patientDto.setEthnicity(patient.getEthnicity());        patientDto.setIsAlive(patient.getIsAlive());        patientDto.setMaritalStatus(patient.getMaritalStatus());        patientDto.setPrimaryContact(patient.getPrimaryContact());        Address address = new Address();        address.setAddressLine(patient.getAddressLine());        address.setDivisionId(patient.getDivisionId());        address.setDistrictId(patient.getDistrictId());        address.setUpazillaId(patient.getUpazillaId());        address.setUnionId(patient.getUnionId());        address.setHoldingNumber(patient.getHoldingNumber());        address.setStreet(patient.getStreet());        address.setAreaMouja(patient.getAreaMouja());        address.setVillage(patient.getVillage());        address.setPostOffice(patient.getPostOffice());        address.setPostCode(patient.getPostCode());        address.setWardId(patient.getWardId());        address.setThanaId(patient.getThanaId());        address.setCityCorporationId(patient.getCityCorporationId());        address.setCountryCode(patient.getCountryCode());        patientDto.setAddress(address);        Address permanentaddress = new Address();        permanentaddress.setAddressLine(patient.getPermanentAddressLine());        permanentaddress.setDivisionId(patient.getPermanentDivisionId());        permanentaddress.setDistrictId(patient.getPermanentDistrictId());        permanentaddress.setUpazillaId(patient.getPermanentUpazillaId());        permanentaddress.setUnionId(patient.getPermanentUnionId());        permanentaddress.setHoldingNumber(patient.getPermanentHoldingNumber());        permanentaddress.setStreet(patient.getPermanentStreet());        permanentaddress.setAreaMouja(patient.getPermanentAreaMouja());        permanentaddress.setVillage(patient.getPermanentVillage());        permanentaddress.setPostOffice(patient.getPostOffice());        permanentaddress.setPostCode(patient.getPostCode());        permanentaddress.setWardId(patient.getPermanentWardId());        permanentaddress.setThanaId(patient.getPermanentThanaId());        permanentaddress.setCityCorporationId(patient.getPermanentCityCorporationId());        permanentaddress.setCountryCode(patient.getPermanentCountryCode());        PhoneNumber phoneNumber = new PhoneNumber();        PhoneNumber primaryContactNumber = new PhoneNumber();        phoneNumber.setNumber(patient.getCellNo());        phoneNumber.setAreaCode(patient.getPhoneNumberAreaCode());        phoneNumber.setCountryCode(patient.getPhoneNumberCountryCode());        phoneNumber.setExtension(patient.getPhoneNumberExtension());        primaryContactNumber.setNumber(patient.getPrimaryContact());        primaryContactNumber.setAreaCode(patient.getPrimaryContactNumberAreaCode());        primaryContactNumber.setCountryCode(patient.getPrimaryContactNumberCountryCode());        primaryContactNumber.setExtension(patient.getPrimaryContactNumberExtension());        if (primaryContactNumber.getNumber() != null) {            patientDto.setPhoneNumber(phoneNumber);        }        if (phoneNumber.getNumber() != null) {            patientDto.setPrimaryContactNumber(primaryContactNumber);        }        if (permanentaddress.getCountryCode() != null) {            if (permanentaddress.getCountryCode() == "050" && permanentaddress.getDistrictId() != null) {                patientDto.setPermanentAddress(permanentaddress);            }            if (permanentaddress.getCountryCode() != "050") {                patientDto.setPermanentAddress(permanentaddress);            }        }        patientDto.setCreatedAt(patient.getCreatedAt());        patientDto.setUpdatedAt(patient.getUpdatedAt());        return patientDto;    }    public MCIResponse update(String hid, PatientDto patientDto) {        PatientDto patientDtoDb = findByHealthId(hid);        String fullName = "";        if (patientDto.getGivenName() != null) {            fullName = patientDto.getGivenName();        }        if (patientDto.getSurName() != null) {            fullName = fullName + " " + patientDto.getSurName();        }        Patient p = getEntityFromPatientMapper(patientDto);        p.setHealthId(hid);        p.setFullName(fullName);        p.setUpdatedAt(new Date());        String healthId = p.getHealthId();        Batch batch = QueryBuilder.batch();        CassandraConverter converter = template.getConverter();        batch.add(toUpdateQuery("patient", p, null, converter));        template.execute(batch);        return new MCIResponse(p.getHealthId(), HttpStatus.ACCEPTED);    }    public Patient getEntityFromPatientMapper(PatientDto p) {        return getEntityFromPatientMapper(p, new Patient());    }    public Patient getEntityFromPatientMapper(PatientDto p, Patient patient) {        String relationsJson = "";        ObjectMapper mapper = new ObjectMapper();        Relation father = p.getRelation("FTH");        Relation mother = p.getRelation("MTH");        try {            relationsJson = mapper.writeValueAsString(p.getRelations());        } catch (JsonProcessingException e) {            e.printStackTrace();        }        Address address = p.getAddress();        Address permanentAddress = p.getPermanentAddress();        PhoneNumber phoneNumber = p.getPhoneNumber();        PhoneNumber primaryContactNumber = p.getPrimaryContactNumber();        patient.setHealthId(p.getHealthId());        patient.setNationalId(p.getNationalId());        patient.setBirthRegistrationNumber(p.getBirthRegistrationNumber());        patient.setFullNameBangla(StringUtils.trim(p.getNameBangla()));        patient.setGivenName(StringUtils.trim(p.getGivenName()));        if (p.getGivenName() != null) {            patient.setLowerGivenName(StringUtils.trim(p.getGivenName()).toLowerCase());        }        patient.setSurName(StringUtils.trim(p.getSurName()));        if (p.getSurName() != null) {            patient.setLowerSurName(StringUtils.trim(p.getSurName()).toLowerCase());        }        patient.setDateOfBirth(p.getDateOfBirth());        patient.setGender(p.getGender());        patient.setOccupation(p.getOccupation());        patient.setEducationLevel(p.getEducationLevel());        if (father != null) {            patient.setFathersNameBangla(StringUtils.trim(father.getNameBangla()));            patient.setFathersGivenName(StringUtils.trim(father.getGivenName()));            patient.setFathersSurName(StringUtils.trim(father.getSurName()));            patient.setFathersBrn(father.getBirthRegistrationNumber());            patient.setFathersNid(father.getNationalId());            patient.setFathersUid(father.getUid());        }        if (mother != null) {            patient.setMothersNameBangla(StringUtils.trim(mother.getNameBangla()));            patient.setMothersGivenName(StringUtils.trim(mother.getGivenName()));            patient.setMothersSurName(StringUtils.trim(mother.getSurName()));            patient.setMothersBrn(mother.getBirthRegistrationNumber());            patient.setMothersNid(mother.getNationalId());            patient.setMothersUid(mother.getUid());        }        patient.setUid(p.getUid());        patient.setPlaceOfBirth(StringUtils.trim(p.getPlaceOfBirth()));        patient.setReligion(p.getReligion());        patient.setBloodGroup(p.getBloodGroup());        patient.setNationality(StringUtils.trim(p.getNationality()));        patient.setDisability(p.getDisability());        patient.setEthnicity(p.getEthnicity());        patient.setIsAlive(p.getIsAlive());        patient.setMaritalStatus(p.getMaritalStatus());        if (address != null) {            patient.setAddressLine(address.getAddressLine());            patient.setDivisionId(address.getDivisionId());            patient.setDistrictId(address.getDistrictId());            patient.setUpazillaId(address.getUpazillaId());            patient.setUnionId(address.getUnionId());            patient.setHoldingNumber(StringUtils.trim(address.getHoldingNumber()));            patient.setStreet(StringUtils.trim(address.getStreet()));            patient.setAreaMouja(StringUtils.trim(address.getAreaMouja()));            patient.setVillage(StringUtils.trim(address.getVillage()));            patient.setPostOffice(StringUtils.trim(address.getPostOffice()));            patient.setPostCode(address.getPostCode());            patient.setWardId(address.getWardId());            patient.setThanaId(address.getThanaId());            patient.setCityCorporationId(address.getCityCorporationId());            patient.setCountryCode(address.getCountryCode());        }        if (permanentAddress != null) {            patient.setPermanentAddressLine(permanentAddress.getAddressLine());            patient.setPermanentDivisionId(permanentAddress.getDivisionId());            patient.setPermanentDistrictId(permanentAddress.getDistrictId());            patient.setPermanentUpazillaId(permanentAddress.getUpazillaId());            patient.setPermanentUnionId(permanentAddress.getUnionId());            patient.setPermanentHoldingNumber(StringUtils.trim(permanentAddress.getHoldingNumber()));            patient.setPermanentStreet(StringUtils.trim(permanentAddress.getStreet()));            patient.setPermanentAreaMouja(StringUtils.trim(permanentAddress.getAreaMouja()));            patient.setPermanentVillage(StringUtils.trim(permanentAddress.getVillage()));            patient.setPermanentPostOffice(StringUtils.trim(permanentAddress.getPostOffice()));            patient.setPermanentPostCode(permanentAddress.getPostCode());            patient.setPermanentWardId(permanentAddress.getWardId());            patient.setPermanentThanaId(permanentAddress.getThanaId());            patient.setPermanentCityCorporationId(permanentAddress.getCityCorporationId());            patient.setPermanentCountryCode(permanentAddress.getCountryCode());        }        patient.setRelations(relationsJson);        if (phoneNumber != null) {            patient.setCellNo(phoneNumber.getNumber());            patient.setPhoneNumberAreaCode(phoneNumber.getAreaCode());            patient.setPhoneNumberCountryCode(phoneNumber.getCountryCode());            patient.setPhoneNumberExtension(phoneNumber.getExtension());        }        if (primaryContactNumber != null) {            patient.setPrimaryCellNo(primaryContactNumber.getNumber());            patient.setPrimaryContactNumberAreaCode(primaryContactNumber.getAreaCode());            patient.setPrimaryContactNumberCountryCode(primaryContactNumber.getCountryCode());            patient.setPrimaryContactNumberExtension(primaryContactNumber.getExtension());        }        patient.setPrimaryContact(StringUtils.trim(p.getPrimaryContact()));        return patient;    }}