package org.sharedhealth.mci.web.infrastructure.persistence;import com.datastax.driver.core.querybuilder.Batch;import com.datastax.driver.core.querybuilder.QueryBuilder;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.sharedhealth.mci.web.handler.MCIResponse;import org.sharedhealth.mci.web.mapper.*;import org.sharedhealth.mci.web.model.*;import org.sharedhealth.mci.web.utils.UidGenerator;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.data.cassandra.convert.CassandraConverter;import org.springframework.data.cassandra.core.CassandraTemplate;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import org.springframework.util.concurrent.ListenableFuture;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.List;import java.util.concurrent.ExecutionException;import static com.datastax.driver.core.querybuilder.QueryBuilder.in;import static com.datastax.driver.core.querybuilder.QueryBuilder.select;import static com.datastax.driver.core.querybuilder.Select.Where;import static org.apache.commons.collections4.CollectionUtils.intersection;import static org.apache.commons.lang3.StringUtils.isNotBlank;import static org.sharedhealth.mci.web.infrastructure.persistence.PatientQueryBuilder.*;import static org.springframework.data.cassandra.core.CassandraTemplate.createInsertQuery;@Componentpublic class PatientRepository extends BaseRepository {    protected static final Logger logger = LoggerFactory.getLogger(PatientRepository.class);    private final UidGenerator uid;    @Autowired    public PatientRepository(@Qualifier("MCICassandraTemplate") CassandraTemplate template, UidGenerator uid) {        super(template);        this.uid = uid;    }    public MCIResponse create(PatientDto patientDto) throws ExecutionException, InterruptedException {        String fullName = "";        if (patientDto.getGivenName() != null) {            fullName = patientDto.getGivenName();        }        if (patientDto.getSurName() != null) {            fullName = fullName + " " + patientDto.getSurName();        }        Patient p = getEntityFromPatientMapper(patientDto);        String healthId = uid.getId();        p.setHealthId(healthId);        p.setFullName(fullName);        p.setCreatedAt(new Date());        p.setUpdatedAt(new Date());        p.setSurName(patientDto.getSurName());        Batch batch = QueryBuilder.batch();        CassandraConverter converter = template.getConverter();        batch.add(createInsertQuery("patient", p, null, converter));        String nationalId = p.getNationalId();        if (isNotBlank(nationalId)) {            batch.add(createInsertQuery("nid_mapping", new NidMapping(nationalId, healthId), null, converter));        }        String brn = p.getBirthRegistrationNumber();        if (isNotBlank(brn)) {            batch.add(createInsertQuery("brn_mapping", new BrnMapping(brn, healthId), null, converter));        }        String uid = p.getUid();        if (isNotBlank(uid)) {            batch.add(createInsertQuery("uid_mapping", new UidMapping(uid, healthId), null, converter));        }        String phoneNumber = p.getCellNo();        if (isNotBlank(phoneNumber)) {            String areaCode = p.getPhoneNumberAreaCode();            phoneNumber = isNotBlank(areaCode) ? areaCode + phoneNumber : phoneNumber;            batch.add(createInsertQuery("phone_number_mapping", new PhoneNumberMapping(phoneNumber, healthId), null, converter));        }        template.execute(batch);        return new MCIResponse(p.getHealthId(), HttpStatus.CREATED);    }    public List<PatientDto> findAll(SearchCriteria criteria) {        List<String> healthIds = findHealthIds(criteria);        if (!CollectionUtils.isEmpty(healthIds)) {            Where where = select().from("patient").where(in(HEALTH_ID, healthIds.toArray(new String[]{})));            List<Patient> patients = template.queryForList(where.toString(), Patient.class);            filterPatients(patients, criteria);        }        return null;    }    List<PatientDto> filterPatients(List<Patient> patients, SearchCriteria criteria) {        List<PatientDto> result = new ArrayList<>(patients.size());        for (Patient p : patients) {            if (isMatchingPatient(p, criteria)) {                result.add(buildPatientDto(p));            }        }        return result;    }    private boolean isMatchingPatient(Patient p, SearchCriteria criteria) {        if (isNotBlank(criteria.getNid()) && !p.getNationalId().equals(criteria.getNid())) {            return false;        }        if (isNotBlank(criteria.getBrn()) && !p.getBirthRegistrationNumber().equals(criteria.getBrn())) {            return false;        }        if (isNotBlank(criteria.getUid()) && !p.getUid().equals(criteria.getUid())) {            return false;        }        if (isNotBlank(criteria.getDivisionId()) && !p.getDistrictId().equals(criteria.getDistrictId())) {            return false;        }        if (isNotBlank(criteria.getDistrictId()) && !p.getDistrictId().equals(criteria.getDistrictId())) {            return false;        }        if (isNotBlank(criteria.getUpazilaId()) && !p.getUpazillaId().equals(criteria.getUpazilaId())) {            return false;        }        if (isNotBlank(criteria.getGivenName()) && !p.getGivenName().equals(criteria.getGivenName())) {            return false;        }        if (isNotBlank(criteria.getSurname()) && !p.getSurName().equals(criteria.getSurname())) {            return false;        }        return true;    }    List<String> findHealthIds(SearchCriteria criteria) {        String query = null;        if (isNotBlank(criteria.getNid())) {            query = buildFindHidByNidQuery(criteria.getNid());        } else if (isNotBlank(criteria.getBrn())) {            query = buildFindHidByBrnQuery(criteria.getBrn());        } else if (isNotBlank(criteria.getUid())) {            query = buildFindHidByUidQuery(criteria.getUid());        } else if (org.sharedhealth.mci.utils.StringUtils.isNotBlank(criteria.getDivisionId(), criteria.getDistrictId(),                criteria.getUpazilaId(), criteria.getGivenName())) {            query = buildFindHidByAddressAndNameQuery(criteria.getDivisionId(), criteria.getDistrictId(),                    criteria.getUpazilaId(), criteria.getGivenName(), criteria.getSurname());        }        if (isNotBlank(query)) {            return template.queryForList(query, String.class);        }        return null;    }    public String findHealthId(String nid, String brn, String uid) {        Collection<String> hids = new ArrayList<>();        if (isNotBlank(nid)) {            hids = executeQuery(buildFindHidByNidQuery(nid));        }        if (isNotBlank(brn)) {            hids = intersection(hids, executeQuery(buildFindHidByBrnQuery(brn)));            if (CollectionUtils.isNotEmpty(hids)) {                return hids.iterator().next();            }        }        if (isNotBlank(uid)) {            hids = intersection(hids, executeQuery(buildFindHidByUidQuery(uid)));            if (CollectionUtils.isNotEmpty(hids)) {                return hids.iterator().next();            }        }        return null;    }    private List<String> executeQuery(String query) {        List<String> result = template.queryForList(query, String.class);        if (result == null) {            return new ArrayList<>();        }        return result;    }    /**     * ------------------------------------------------------------------------------------------------------- *     *///    private Select buildFindAllQuery(SearchCriteria criteria) {//        Select select = select().from("patient");////        if (isNotBlank(criteria.getFull_name())) {//            select.where(eq("full_name", criteria.getFull_name()));//        }////        if (isNotBlank(criteria.getNid())) {//            select.where(eq(PatientQueryBuilder.NATIONAL_ID, criteria.getNid()));//        }////        if (isNotBlank(criteria.getBin_brn())) {//            select.where(eq(PatientQueryBuilder.BIN_BRN, criteria.getBin_brn()));//        }////        if (isNotBlank(criteria.getUid())) {//            select.where(eq(PatientQueryBuilder.UID, criteria.getUid()));//        }////        if (isNotBlank(criteria.getPresent_address())) {//            select.where(eq(getAddressHierarchyField(criteria.getPresent_address().length()), criteria.getPresent_address()));//        }////        if (isNotBlank(criteria.getSur_name())) {//            select.where(eq("lower_sur_name", StringUtils.trim(criteria.getSur_name()).toLowerCase()));//        }////        if (isNotBlank(criteria.getGiven_name())) {//            select.where(eq("lower_given_name", StringUtils.trim(criteria.getGiven_name()).toLowerCase()));//        }////        select.limit(criteria.getMaximum_limit() + 1);//        select.allowFiltering();//        return select;//    }////    private ListenableFuture<MCIResponse> getStringListenableFuture(final SettableFuture<MCIResponse> result) {//        return new SimpleListenableFuture<MCIResponse, MCIResponse>(result) {//            @Override//            protected MCIResponse adapt(MCIResponse adapteeResult) throws ExecutionException {//                return adapteeResult;//            }//        };//    }//    private PatientDto getExistingPatient(PatientDto patientDto) throws InterruptedException, ExecutionException {////        PatientDto existingPatient;////        if (!StringUtils.isBlank(patientDto.getHealthId())) {//            try {//                return findByHealthId(patientDto.getHealthId()).get();//            } catch (Exception e) {//                DirectFieldBindingResult bindingResult = new DirectFieldBindingResult(patientDto, "patient");//                bindingResult.addError(new FieldError("patient", "hid", "2002"));//                throw new ValidationException(bindingResult);//            }//        }//////        return null;//    }    public PatientDto findByHealthId(final String healthId) {        String cql = String.format(getFindByHealthIdQuery(), healthId);        logger.debug("Find patient by health id CQL: [" + cql + "]");        com.datastax.driver.core.ResultSet result = null;        try {            result = template.query(cql);        } catch (Exception e) {            logger.error("Error while finding patient by healthId: " + healthId, e);            throw e;        }        com.datastax.driver.core.Row r = result.one();        //return getPatientFromRow(r);        return null;//        template.queryAsynchronously(cql, new AsynchronousQueryListener() {//            @Override//            public void onQueryComplete(ResultSetFuture rsf) {//                try {//                    Row row = rsf.get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS).one();//                    if (row == null) {//                        throw new PatientNotFoundException("No patient found with health id: " + healthId);//                    }//                   setPatientOnResult(row, result);//                } catch (Exception e) {//                    logger.error("Error while finding patient by healthId: " + healthId, e);//                    result.setException(e);//                }//            }//        });////        return new SimpleListenableFuture<PatientDto, PatientDto>(result) {//            @Override//            protected PatientDto adapt(PatientDto adapteeResult) throws ExecutionException {//                return adapteeResult;//            }//        };    }////    public PatientDto findByNationalId(final String nationalId) {//        String cql = String.format(getFindByNationalIdQuery(), nationalId);//        logger.debug("Find patient by national id CQL: [" + cql + "]");//        final SettableFuture<PatientDto> result = SettableFuture.create();////        template.queryAsynchronously(cql, new AsynchronousQueryListener() {//            @Override//            public void onQueryComplete(ResultSetFuture rsf) {//                try {//                    Row row = rsf.get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS).one();//                    if (row == null) {//                        throw new PatientNotFoundException("No patient found with national id: " + nationalId);//                    }//                    setPatientOnResult(row, result);//                } catch (Exception e) {//                    logger.error("Error while finding patient by nationalId: " + nationalId, e);//                    result.setException(e);//                }//            }//        });////        return null;//    }////    public ListenableFuture<PatientDto> findByBirthRegistrationNumber(final String birthRegistrationNumber) {//        String cql = String.format(getFindByBirthRegistrationNumberQuery(), birthRegistrationNumber);//        logger.debug("Find patient by birth registration number CQL: [" + cql + "]");//        final SettableFuture<PatientDto> result = SettableFuture.create();////        template.queryAsynchronously(cql, new AsynchronousQueryListener() {//            @Override//            public void onQueryComplete(ResultSetFuture rsf) {//                try {//                    Row row = rsf.get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS).one();//                    if (row == null) {//                        throw new PatientNotFoundException("No patient found with birth registration number: " + birthRegistrationNumber);//                    }//                    setPatientOnResult(row, result);//                } catch (Exception e) {//                    logger.error("Error while finding patient by birth registration number: " + birthRegistrationNumber, e);//                    result.setException(e);//                }//            }//        });////        return new SimpleListenableFuture<PatientDto, PatientDto>(result) {//            @Override//            protected PatientDto adapt(PatientDto adapteeResult) throws ExecutionException {//                return adapteeResult;//            }//        };//    }////    public ListenableFuture<PatientDto> findByName(final String fullName) {//        String cql = String.format(getFindByNameQuery(), fullName);//        logger.debug("Find patient by name  CQL: [" + cql + "]");//        final SettableFuture<PatientDto> result = SettableFuture.create();////        template.queryAsynchronously(cql, new AsynchronousQueryListener() {//            @Override//            public void onQueryComplete(ResultSetFuture rsf) {//                try {//                    Row row = rsf.get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS).one();//                    if (row == null) {//                        throw new PatientNotFoundException("No patient found with name: " + fullName);//                    }//                    setPatientOnResult(row, result);//                } catch (Exception e) {//                    logger.error("Error while finding patient by name: " + fullName, e);//                    result.setException(e);//                }//            }//        });////        return new SimpleListenableFuture<PatientDto, PatientDto>(result) {//            @Override//            protected PatientDto adapt(PatientDto adapteeResult) throws ExecutionException {//                return adapteeResult;//            }//        };//    }////    public ListenableFuture<PatientDto> findByUid(final String uid) {//        String cql = String.format(getFindByUidQuery(), uid);//        logger.debug("Find patient by name  CQL: [" + cql + "]");//        final SettableFuture<PatientDto> result = SettableFuture.create();////        template.queryAsynchronously(cql, new AsynchronousQueryListener() {//            @Override//            public void onQueryComplete(ResultSetFuture rsf) {//                try {//                    Row row = rsf.get(TIMEOUT_IN_MILLIS, TimeUnit.MILLISECONDS).one();//                    if (row == null) {//                        throw new PatientNotFoundException("No patient found with name: " + uid);//                    }//                    setPatientOnResult(row, result);//                } catch (Exception e) {//                    logger.error("Error while finding patient by name: " + uid, e);//                    result.setException(e);//                }//            }//        });////        return new SimpleListenableFuture<PatientDto, PatientDto>(result) {//            @Override//            protected PatientDto adapt(PatientDto adapteeResult) throws ExecutionException {//                return adapteeResult;//            }//        };//    }//    private void setPatientOnResult(Row r, SettableFuture<PatientDto> result) throws InterruptedException, ExecutionException {//        PatientDto patientDto = getPatientFromRow(r);//        result.set(patientDto);//    }//    private PatientDto buildPatientDto(Patient patient) {        PatientDto dto = new PatientDto();        dto.setHealthId(patient.getHealthId());        dto.setNationalId(patient.getNationalId());        dto.setUid(patient.getUid());        dto.setPlaceOfBirth(patient.getPlaceOfBirth());//        dto.setReligion(row.getString(RELIGION));//        dto.setBloodGroup(row.getString(BLOOD_GROUP));//        dto.setNameBangla(row.getString(FULL_NAME_BANGLA));//        dto.setBirthRegistrationNumber(row.getString(BIN_BRN));//        dto.setGivenName(row.getString(GIVEN_NAME));//        dto.setSurName(row.getString(SUR_NAME));//        dto.setDateOfBirth(row.getDateAsString(DATE_OF_BIRTH));//        dto.setGender(row.getString(GENDER));//        dto.setOccupation(row.getString(OCCUPATION));//        dto.setEducationLevel(row.getString(EDU_LEVEL));//        dto.setNationality(row.getString(NATIONALITY));//        dto.setDisability(row.getString(DISABILITY));//        dto.setEthnicity(row.getString(ETHNICITY));//        dto.setIsAlive(row.getString(IS_ALIVE));//        dto.setMaritalStatus(row.getString(MARITAL_STATUS));////        dto.setPrimaryContact(row.getString(PRIMARY_CONTACT));//////        Address address = new Address();//        address.setAddressLine(row.getString(ADDRESS_LINE));//        address.setDivisionId(row.getString(DIVISION_ID));//        address.setDistrictId(row.getString(DISTRICT_ID));//        address.setUpazillaId(row.getString(UPAZILLA_ID));//        address.setUnionId(row.getString(UNION_ID));//        address.setHoldingNumber(row.getString(HOLDING_NUMBER));//        address.setStreet(row.getString(STREET));//        address.setAreaMouja(row.getString(AREA_MOUJA));//        address.setVillage(row.getString(VILLAGE));//        address.setPostOffice(row.getString(POST_OFFICE));//        address.setPostCode(row.getString(POST_CODE));//        address.setWardId(row.getString(WARD));//        address.setThanaId(row.getString(THANA));//        address.setCityCorporationId(row.getString(CITY_CORPORATION));//        address.setCountryCode(row.getString(COUNTRY));//        dto.setAddress(address);////        Address permanentaddress = new Address();//        permanentaddress.setAddressLine(row.getString(PERMANENT_ADDRESS_LINE));//        permanentaddress.setDivisionId(row.getString(PERMANENT_DIVISION_ID));//        permanentaddress.setDistrictId(row.getString(PERMANENT_DISTRICT_ID));//        permanentaddress.setUpazillaId(row.getString(PERMANENT_UPAZILLA_ID));//        permanentaddress.setUnionId(row.getString(PERMANENT_UNION_ID));//        permanentaddress.setHoldingNumber(row.getString(PERMANENT_HOLDING_NUMBER));//        permanentaddress.setStreet(row.getString(PERMANENT_STREET));//        permanentaddress.setAreaMouja(row.getString(PERMANENT_AREA_MOUJA));//        permanentaddress.setVillage(row.getString(PERMANENT_VILLAGE));//        permanentaddress.setPostOffice(row.getString(PERMANENT_POST_OFFICE));//        permanentaddress.setPostCode(row.getString(PERMANENT_POST_CODE));//        permanentaddress.setWardId(row.getString(PERMANENT_WARD));//        permanentaddress.setThanaId(row.getString(PERMANENT_THANA));//        permanentaddress.setCityCorporationId(row.getString(PERMANENT_CITY_CORPORATION));//        permanentaddress.setCountryCode(row.getString(PERMANENT_COUNTRY));////        PhoneNumber phoneNumber = new PhoneNumber();//        PhoneNumber primaryContactNumber = new PhoneNumber();////        phoneNumber.setNumber(row.getString(PHONE_NO));//        phoneNumber.setAreaCode(row.getString(PHONE_NUMBER_AREA_CODE));//        phoneNumber.setCountryCode(row.getString(PHONE_NUMBER_COUNTRY_CODE));//        phoneNumber.setExtension(row.getString(PHONE_NUMBER_EXTENSION));////        primaryContactNumber.setNumber(row.getString(PRIMARY_CONTACT_NO));//        primaryContactNumber.setAreaCode(row.getString(PRIMARY_CONTACT_NUMBER_AREA_CODE));//        primaryContactNumber.setCountryCode(row.getString(PRIMARY_CONTACT_NUMBER_COUNTRY_CODE));//        primaryContactNumber.setExtension(row.getString(PRIMARY_CONTACT_NUMBER_EXTENSION));////        if (primaryContactNumber.getNumber() != null) {//            dto.setPhoneNumber(phoneNumber);//        }////        if (phoneNumber.getNumber() != null) {//            dto.setPrimaryContactNumber(primaryContactNumber);//        }////        if (permanentaddress.getCountryCode() != null) {//            if (permanentaddress.getCountryCode() == "050" && permanentaddress.getDistrictId() != null) {//                dto.setPermanentAddress(permanentaddress);//            }////            if (permanentaddress.getCountryCode() != "050") {//                dto.setPermanentAddress(permanentaddress);//            }//        }////        dto.setCreatedAt(row.getDate("created_at"));//        dto.setUpdatedAt(row.getDate("updated_at"));        return dto;    }    private PatientDto getPatientDtoFromPatient(Patient patient) {        PatientDto patientDto = new PatientDto();        patientDto.setHealthId(patient.getHealthId());        patientDto.setNationalId(patient.getNationalId());        patientDto.setUid(patient.getNationalId());        patientDto.setPlaceOfBirth(patient.getPlaceOfBirth());        patientDto.setReligion(patient.getReligion());        patientDto.setBloodGroup(patient.getBloodGroup());        patientDto.setNameBangla(patient.getFullNameBangla());        patientDto.setBirthRegistrationNumber(patient.getBirthRegistrationNumber());        patientDto.setGivenName(patient.getGivenName());        patientDto.setSurName(patient.getSurName());        //  patientDto.setDateOfBirth(patient.getDateOfBirth().toString());        patientDto.setGender(patient.getGender());        patientDto.setOccupation(patient.getOccupation());        patientDto.setEducationLevel(patient.getEducationLevel());        patientDto.setNationality(patient.getNationality());        patientDto.setDisability(patient.getDisability());        patientDto.setEthnicity(patient.getEthnicity());        patientDto.setIsAlive(patient.getIsAlive());        patientDto.setMaritalStatus(patient.getMaritalStatus());        patientDto.setPrimaryContact(patient.getPrimaryContact());        Address address = new Address();        address.setAddressLine(patient.getAddressLine());        address.setDivisionId(patient.getDivisionId());        address.setDistrictId(patient.getDistrictId());        address.setUpazillaId(patient.getUpazillaId());        address.setUnionId(patient.getUnionId());        address.setHoldingNumber(patient.getHoldingNumber());        address.setStreet(patient.getStreet());        address.setAreaMouja(patient.getAreaMouja());        address.setVillage(patient.getVillage());        address.setPostOffice(patient.getPostOffice());        address.setPostCode(patient.getPostCode());        address.setWardId(patient.getWardId());        address.setThanaId(patient.getThanaId());        address.setCityCorporationId(patient.getCityCorporationId());        address.setCountryCode(patient.getCountryCode());        patientDto.setAddress(address);        Address permanentaddress = new Address();        permanentaddress.setAddressLine(patient.getPermanentAddressLine());        permanentaddress.setDivisionId(patient.getPermanentDivisionId());        permanentaddress.setDistrictId(patient.getPermanentDistrictId());        permanentaddress.setUpazillaId(patient.getPermanentUpazillaId());        permanentaddress.setUnionId(patient.getPermanentUnionId());        permanentaddress.setHoldingNumber(patient.getPermanentHoldingNumber());        permanentaddress.setStreet(patient.getPermanentStreet());        permanentaddress.setAreaMouja(patient.getPermanentAreaMouja());        permanentaddress.setVillage(patient.getPermanentVillage());        permanentaddress.setPostOffice(patient.getPostOffice());        permanentaddress.setPostCode(patient.getPostCode());        permanentaddress.setWardId(patient.getPermanentWardId());        permanentaddress.setThanaId(patient.getPermanentThanaId());        permanentaddress.setCityCorporationId(patient.getPermanentCityCorporationId());        permanentaddress.setCountryCode(patient.getPermanentCountryCode());        PhoneNumber phoneNumber = new PhoneNumber();        PhoneNumber primaryContactNumber = new PhoneNumber();        phoneNumber.setNumber(patient.getCellNo());        phoneNumber.setAreaCode(patient.getPhoneNumberAreaCode());        phoneNumber.setCountryCode(patient.getPhoneNumberCountryCode());        phoneNumber.setExtension(patient.getPhoneNumberExtension());        primaryContactNumber.setNumber(patient.getPrimaryContact());        primaryContactNumber.setAreaCode(patient.getPrimaryContactNumberAreaCode());        primaryContactNumber.setCountryCode(patient.getPrimaryContactNumberCountryCode());        primaryContactNumber.setExtension(patient.getPrimaryContactNumberExtension());        if (primaryContactNumber.getNumber() != null) {            patientDto.setPhoneNumber(phoneNumber);        }        if (phoneNumber.getNumber() != null) {            patientDto.setPrimaryContactNumber(primaryContactNumber);        }        if (permanentaddress.getCountryCode() != null) {            if (permanentaddress.getCountryCode() == "050" && permanentaddress.getDistrictId() != null) {                patientDto.setPermanentAddress(permanentaddress);            }            if (permanentaddress.getCountryCode() != "050") {                patientDto.setPermanentAddress(permanentaddress);            }        }        patientDto.setCreatedAt(patient.getCreatedAt());        patientDto.setUpdatedAt(patient.getUpdatedAt());        return patientDto;    }//    public MCIResponse update(PatientDto patientDto, final String hid) {////        final SettableFuture<MCIResponse> result = SettableFuture.create();////        if (patientDto.getHealthId() != null && !StringUtils.equals(patientDto.getHealthId(), hid)) {//            DirectFieldBindingResult bindingResult = new DirectFieldBindingResult(patientDto, "patient");//            bindingResult.addError(new FieldError("patient", "hid", "1004"));//            throw new ValidationException(bindingResult);//        }////        PatientDto patientDtoDb;//        try {//            patientDtoDb = findByHealthId(hid).get();//        } catch (Exception e) {//            throw new PatientNotFoundException("No patient found with health id: " + hid);//        }////        String fullName = "";//        if (patientDto.getGivenName() != null) {//            fullName = patientDto.getGivenName();//        }//        if (patientDto.getSurName() != null) {//            fullName = fullName + " " + patientDto.getSurName();//        }//    //   Patient p = getEntityFromPatientMapper(patientDto);//        p.setHealthId(hid);//        p.setFullName(fullName);//        p.setUpdatedAt(new Date());////        String healthId = p.getHealthId();//        Batch batch = QueryBuilder.batch();//        CassandraConverter converter = template.getConverter();////        batch.add(toUpdateQuery("patient", p, null, converter));////        String nationalId = p.getNationalId();//        if (isNotBlank(nationalId)) {//            batch.add(createDeleteQuery("nid_mapping", new NidMapping(patientDtoDb.getNationalId(), healthId), null, converter));//            batch.add(createInsertQuery("nid_mapping", new NidMapping(nationalId, healthId), null, converter));//        }////        String brn = p.getBirthRegistrationNumber();//        if (isNotBlank(brn)) {//            batch.add(createDeleteQuery("brn_mapping", new BrnMapping(patientDtoDb.getBirthRegistrationNumber(), healthId), null, converter));//            batch.add(createInsertQuery("brn_mapping", new BrnMapping(brn, healthId), null, converter));//        }////        String uid = p.getUid();//        if (isNotBlank(brn)) {//            batch.add(createInsertQuery("uid_mapping", new UidMapping(patientDtoDb.getUid(), healthId), null, converter));//            batch.add(createInsertQuery("uid_mapping", new UidMapping(uid, healthId), null, converter));//        }////        template.execute(batch);////        return new MCIResponse(p.getHealthId(), HttpStatus.ACCEPTED);//    }    //    public ListenableFuture<List<PatientDto>> findAllByLocations(List<String> locations, String start, Date since) {////        final SettableFuture<List<PatientDto>> result = SettableFuture.create();//        List<PatientDto> patients = new ArrayList<>();////        int limit = PER_PAGE_LIMIT;////        if (locations != null && locations.size() > 0) {//            String locationPointer = getLocationPointer(locations, start, null);////            for (String catchment : locations) {//                if (patients.size() == 0 && !isLocationBelongsToCatchment(locationPointer, catchment)) {//                    continue;//                }////                ListenableFuture<List<PatientDto>> res = this.findAllByLocation(catchment, start, limit, since);//                try {//                    List<PatientDto> temp = res.get();//                    patients.addAll(temp);////                    if (patients.size() < PER_PAGE_LIMIT) {//                        start = null;//                        limit = PER_PAGE_LIMIT - patients.size();//                        locationPointer = null;//                    } else {//                        break;//                    }////                } catch (Exception e) {//                    e.printStackTrace();//                }//            }//        } else {//            return this.findAllByLocation(null, start, limit, since);//        }////        result.set(patients);//        return getPatientListListenableFuture(result);//    }////    public ListenableFuture<List<PatientDto>> findAllByLocation(String location, String start, int limit, Date since) {////        Select select = select().from("patient");////        if (StringUtils.isBlank(location)) {//            final SettableFuture<List<PatientDto>> result = SettableFuture.create();//            return getPatientListListenableFuture(result);//        }////        select.where(eq(getAddressHierarchyField(location.length()), location));////        if (isNotBlank(start)) {//            select.where(QueryBuilder.gt(QueryBuilder.token("health_id"), QueryBuilder.raw("token('" + start + "')")));//        }////        if (since != null) {//            select.where(QueryBuilder.gt("updated_at", since));//            select.allowFiltering();//        }////        if (limit > 0) {//            select.limit(limit);//        }////        return getPatientListListenableFuture(select);//    }////    private ListenableFuture<List<PatientDto>> getPatientListListenableFuture(final Select select) {//        return new SimpleListenableFuture<List<PatientDto>, ResultSet>(//                template.queryAsynchronously(select)) {//            @Override//            protected List<PatientDto> adapt(ResultSet resultSet) throws ExecutionException {//                List<PatientDto> patientDtos = new ArrayList<>();//                for (Row result : resultSet.all()) {//                    PatientDto patientDto = getPatientFromRow(result);//                    patientDtos.add(patientDto);//                }////                return patientDtos;//            }//        };//    }////    private ListenableFuture<List<PatientDto>> getPatientListListenableFuture(final SettableFuture<List<PatientDto>> result) {//        return new SimpleListenableFuture<List<PatientDto>, List<PatientDto>>(result) {//            @Override//            protected List<PatientDto> adapt(List<PatientDto> p) throws ExecutionException {//                return p;//            }//        };//    }////    private String getLocationPointer(List<String> locations, String start, String d) {//        if (locations.size() > 1 && isNotBlank(start)) {//            ListenableFuture<PatientDto> p = findByHealthId(start);//            try {//                return p.get().getAddress().getGeoCode();//            } catch (InterruptedException | ExecutionException e) {//                logger.debug("Invalid start parameter");//            }//        }////        return d;//    }    private boolean isLocationBelongsToCatchment(String location, String catchment) {        return StringUtils.isBlank(location) || location.startsWith(catchment);    }    private String getAddressHierarchyField(int length) {        return "location_level" + (length / 2);    }    public Patient getEntityFromPatientMapper(PatientDto p) {        return getEntityFromPatientMapper(p, new Patient());    }    public Patient getEntityFromPatientMapper(PatientDto p, Patient patient) {        String relationsJson = "";        ObjectMapper mapper = new ObjectMapper();        Relation father = p.getRelation("FTH");        Relation mother = p.getRelation("MTH");        try {            relationsJson = mapper.writeValueAsString(p.getRelations());        } catch (JsonProcessingException e) {            e.printStackTrace();        }        Address address = p.getAddress();        Address permanentAddress = p.getPermanentAddress();        PhoneNumber phoneNumber = p.getPhoneNumber();        PhoneNumber primaryContactNumber = p.getPrimaryContactNumber();        patient.setHealthId(p.getHealthId());        patient.setNationalId(p.getNationalId());        patient.setBirthRegistrationNumber(p.getBirthRegistrationNumber());        patient.setFullNameBangla(StringUtils.trim(p.getNameBangla()));        patient.setGivenName(StringUtils.trim(p.getGivenName()));        if (p.getGivenName() != null) {            patient.setLowerGivenName(StringUtils.trim(p.getGivenName()).toLowerCase());        }        patient.setSurName(StringUtils.trim(p.getSurName()));        if (p.getSurName() != null) {            patient.setLowerSurName(StringUtils.trim(p.getSurName()).toLowerCase());        }        patient.setDateOfBirth(p.getDateOfBirth());        patient.setGender(p.getGender());        patient.setOccupation(p.getOccupation());        patient.setEducationLevel(p.getEducationLevel());        if (father != null) {            patient.setFathersNameBangla(StringUtils.trim(father.getNameBangla()));            patient.setFathersGivenName(StringUtils.trim(father.getGivenName()));            patient.setFathersSurName(StringUtils.trim(father.getSurName()));            patient.setFathersBrn(father.getBirthRegistrationNumber());            patient.setFathersNid(father.getNationalId());            patient.setFathersUid(father.getUid());        }        if (mother != null) {            patient.setMothersNameBangla(StringUtils.trim(mother.getNameBangla()));            patient.setMothersGivenName(StringUtils.trim(mother.getGivenName()));            patient.setMothersSurName(StringUtils.trim(mother.getSurName()));            patient.setMothersBrn(mother.getBirthRegistrationNumber());            patient.setMothersNid(mother.getNationalId());            patient.setMothersUid(mother.getUid());        }        patient.setUid(p.getUid());        patient.setPlaceOfBirth(StringUtils.trim(p.getPlaceOfBirth()));        patient.setReligion(p.getReligion());        patient.setBloodGroup(p.getBloodGroup());        patient.setNationality(StringUtils.trim(p.getNationality()));        patient.setDisability(p.getDisability());        patient.setEthnicity(p.getEthnicity());        patient.setIsAlive(p.getIsAlive());        patient.setMaritalStatus(p.getMaritalStatus());        if (address != null) {            patient.setAddressLine(address.getAddressLine());            patient.setDivisionId(address.getDivisionId());            patient.setDistrictId(address.getDistrictId());            patient.setUpazillaId(address.getUpazillaId());            patient.setUnionId(address.getUnionId());            patient.setHoldingNumber(StringUtils.trim(address.getHoldingNumber()));            patient.setStreet(StringUtils.trim(address.getStreet()));            patient.setAreaMouja(StringUtils.trim(address.getAreaMouja()));            patient.setVillage(StringUtils.trim(address.getVillage()));            patient.setPostOffice(StringUtils.trim(address.getPostOffice()));            patient.setPostCode(address.getPostCode());            patient.setWardId(address.getWardId());            patient.setThanaId(address.getThanaId());            patient.setCityCorporationId(address.getCityCorporationId());            patient.setCountryCode(address.getCountryCode());        }        if (permanentAddress != null) {            patient.setPermanentAddressLine(permanentAddress.getAddressLine());            patient.setPermanentDivisionId(permanentAddress.getDivisionId());            patient.setPermanentDistrictId(permanentAddress.getDistrictId());            patient.setPermanentUpazillaId(permanentAddress.getUpazillaId());            patient.setPermanentUnionId(permanentAddress.getUnionId());            patient.setPermanentHoldingNumber(StringUtils.trim(permanentAddress.getHoldingNumber()));            patient.setPermanentStreet(StringUtils.trim(permanentAddress.getStreet()));            patient.setPermanentAreaMouja(StringUtils.trim(permanentAddress.getAreaMouja()));            patient.setPermanentVillage(StringUtils.trim(permanentAddress.getVillage()));            patient.setPermanentPostOffice(StringUtils.trim(permanentAddress.getPostOffice()));            patient.setPermanentPostCode(permanentAddress.getPostCode());            patient.setPermanentWardId(permanentAddress.getWardId());            patient.setPermanentThanaId(permanentAddress.getThanaId());            patient.setPermanentCityCorporationId(permanentAddress.getCityCorporationId());            patient.setPermanentCountryCode(permanentAddress.getCountryCode());        }        patient.setRelations(relationsJson);        if (phoneNumber != null) {            patient.setCellNo(phoneNumber.getNumber());            patient.setPhoneNumberAreaCode(phoneNumber.getAreaCode());            patient.setPhoneNumberCountryCode(phoneNumber.getCountryCode());            patient.setPhoneNumberExtension(phoneNumber.getExtension());        }        if (primaryContactNumber != null) {            patient.setPrimaryCellNo(primaryContactNumber.getNumber());            patient.setPrimaryContactNumberAreaCode(primaryContactNumber.getAreaCode());            patient.setPrimaryContactNumberCountryCode(primaryContactNumber.getCountryCode());            patient.setPrimaryContactNumberExtension(primaryContactNumber.getExtension());        }        patient.setPrimaryContact(StringUtils.trim(p.getPrimaryContact()));        return patient;    }    public MCIResponse update(PatientDto dto, String hid) {        return null;    }    public ListenableFuture<List<PatientDto>> findAllByLocations(List<String> locations, String last, Date since) {        return null;    }}